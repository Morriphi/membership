{
  "name": "secondthought",
  "author": {
    "name": "Rob Conery"
  },
  "description": "A light wrapper for RethinkDB",
  "version": "0.0.3",
  "private": false,
  "scripts": {
    "test": "NODE_ENV=test mocha -w"
  },
  "main": "../lib/db",
  "dependencies": {
    "underscore": "~1.5.1",
    "rethinkdb": "~1.8.0-0",
    "async": "~0.2.9"
  },
  "devDependencies": {
    "chai": "~1.7.2",
    "mocha": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/robconery/second-thought.git"
  },
  "keywords": [
    "database",
    "query",
    "rethinkdb",
    "nosql"
  ],
  "engines": {
    "node": ">= 0.10.1"
  },
  "readme": "# Some Light Abstraction for RethinkDB\n\nThe RethinkDB Node driver is already very simple to use, but there are methods that I wish I \"just had\" at the ready. Those are:\n\n - Query, which returns an array\n - First, Exists\n - Save, which upserts a record\n - Automatic table/db config\n - DB Manipulation (Create/Drop)\n\nSo I created it. That's what we have here.\n\n## Usage\n\nInstall using\n\n```\nnpm install secondthought --save\n```\n\nTo use this in your code, just configure what you need:\n\n```javascript\nvar db = require(\"second-thought\");\ndb.connect({db : \"test\"}, function(err,db){\n\n  //you now have access to all of your tables as properties on your db variable:\n  //so, assume there's a table called \"foo\" in your db...\n  db.foo.save({name : \"Mike\"}, function(err,saved){\n\n    //output the generated ID\n    console.log(saved.id);\n  });\n\n});\n```\n\nEach table on your DB object is a full-blown RethinkDB table, so you can step outside the abstraction at any point:\n\n```javascript\ndb.openConnection(function(err,conn){\n\n  //this is a ReQL query\n  db.foo.eqJoin('bar_id', db.bar).run(conn, function(err,cursor){\n\n    //run the joined action and do something interesting\n    cursor.toArray(function(err,array){\n      //use the array...\n\n      //be sure to close the connection!\n      conn.close();\n    });\n\n  });\n});\n\n```\n\nIn addition you can do all kinds of fun things, like...\n\n```javascript\n//installation of the DB and tables\ndb.connect({db : \"test\"}, function(err, db){\n  db.install(['foo', 'bar'], function(err,result){\n    //tables should be installed now...\n  });\n});\n\n//add a secondary index\ndb.connect({db : \"test\"}, function(err,db){\n\n  db.foo.index(\"email\", function(err, indexed){\n    //indexed == true;\n  });\n});\n```\n\n## Basic Queries\nI've tried to keep the API light and simple - with just a bit of sugar to keep the repetetive stuff to a minimum:\n\n```javascript\n\ndb.connect({db : \"test\", function(err,db){\n\n  db.foo.query({category : \"beer\"}, function(err,beers){\n    //beers is an array, so have at it\n  });\n\n  db.foo.first({email : \"rob@tekpub.com\"}, function(err,rob){\n    //hi Rob\n  });\n\n  db.foo.exists({name : \"bill\"}, function(err, exists){\n    //exists will tell you if it's there\n  });\n\n  db.foo.destroy({id : \"some-id\"}, function(err,destroyed){\n    //destroyed will be true if something was deleted\n  });\n\n  db.foo.destroyAll(function(err,destroyed){\n    //destroyed is the count of records whacked\n  });\n\n  db.foo.updateOnly({name : \"Stevie\"}, \"some-id\", function(err,result){\n    //save will do a full swap of the document, updateOnly will partially update\n    //a document so you need to pass the id along\n    //result will be true if an update happened\n  });\n\n});\n\n```\n\nHave a look at the tests to see a bit more\n\n\n## Wanna Help?\nJust do me a favor and open a PR with some ideas and hopefully a test or two. Thanks!",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/robconery/second-thought/issues"
  },
  "homepage": "https://github.com/robconery/second-thought",
  "_id": "secondthought@0.0.3",
  "dist": {
    "shasum": "dafbd10981cf2b97052129869ceb0269a9605b29"
  },
  "_from": "secondthought@",
  "_resolved": "https://registry.npmjs.org/secondthought/-/secondthought-0.0.3.tgz"
}
